import { Iauthresponse, IauthresponseObj, Iauthtoken, Iuser, Iuserperm } from '@open-stock/stock-universal';
/** generateToken : This function takes in authentication configuration, expiry date, and JWT secret as parameters and uses the  jwt.sign  method to generate a token with the specified configuration.*/
export declare const generateToken: (authConfig: Iauthtoken, expiryDate: string | number, jwtSecret: string) => any;
/** setUserInfo : This function takes in a user ID and permissions as parameters and creates an authentication token object with the provided details. It also logs the details using a logger.*/
export declare const setUserInfo: (userId: string, permissions: Iuserperm) => Iauthtoken;
/** validatePhone : This function takes in a user ID, case type, verification code, and a new password as parameters. It performs various checks, such as validating the user ID and finding the user in the database. It then verifies the provided verification code using the user's Authy token. If the verification is successful, it updates the user's password (if it's a password reset case) and sends a success response. If there are any errors during the process, it returns an appropriate error response. */
export declare const validatePhone: (userId: string, nowCase: string, verifycode: string, newPassword: string) => Promise<IauthresponseObj>;
/** validateEmail : This function is similar to  validatePhone , but it is used for email verification instead. It validates the provided verification code against the user's email token and performs similar checks and updates as  validatePhone . */
export declare const validateEmail: (userId: string, type: string, nowCase: string, verifycode: string, newPassword: string) => Promise<IauthresponseObj>;
/** sendTokenPhone : This function takes in a user object and an enableValidationSMS flag as parameters. It sends an Authy token to the user's phone number for verification. If the enableValidationSMS flag is set to '1', it uses Twilio to send the SMS. If the flag is set to any other value, it assumes SMS validation is disabled and returns a success response. */
export declare const sendTokenPhone: (foundUser: any, enableValidationSMS?: string) => Promise<Iauthresponse>;
/** sendTokenEmail : This function takes in the app, user object, verification type, and app official name as parameters. It generates an email verification token and sends an email to the user with the token. The email content varies based on the verification type. If the email is sent successfully, it returns a success response. If there are any errors during the process, it returns an appropriate error response. */
export declare const sendTokenEmail: (app: any, foundUser: Iuser, type: string, appOfficialName: string) => Promise<Iauthresponse>;
